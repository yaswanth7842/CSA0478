#include <stdio.h>
#define MAX_BLOCKS 100

// Structure to represent a memory block
struct MemoryBlock {
    int blockSize;
    int allocated;
};

// Function to implement worst fit memory allocation
void worstFit(struct MemoryBlock memory[], int m, int processSize) {
    int i, j, worstIdx = -1;
    for (i = 0; i < m; i++) {
        if (!memory[i].allocated) {
            if (worstIdx == -1) {
                worstIdx = i;
            } else if (memory[i].blockSize > memory[worstIdx].blockSize) {
                worstIdx = i;
            }
        }
    }

    if (worstIdx != -1 && memory[worstIdx].blockSize >= processSize) {
        memory[worstIdx].allocated = 1;
        printf("Process of size %d allocated to block %d\n", processSize, worstIdx + 1);
    } else {
        printf("Cannot allocate process of size %d\n", processSize);
    }
}

// Function to initialize memory blocks
void initializeMemory(struct MemoryBlock memory[], int m) {
    for (int i = 0; i < m; i++) {
        memory[i].blockSize = 0;
        memory[i].allocated = 0;
    }
}

int main() {
    int m; // Number of memory blocks
    int processSize; // Size of the process to be allocated

    printf("Enter the number of memory blocks: ");
    scanf("%d", &m);

    struct MemoryBlock memory[MAX_BLOCKS];

    // Initializing memory blocks
    initializeMemory(memory, m);

    // Input memory blocks
    printf("Enter the size of each memory block: \n");
    for (int i = 0; i < m; i++) {
        printf("Block %d: ", i + 1);
        scanf("%d", &memory[i].blockSize);
    }

    // Input process size
    printf("Enter the size of the process: ");
    scanf("%d", &processSize);

    // Allocating memory using worst fit algorithm
    worstFit(memory, m, processSize);

    return 0;
}
