#include <stdio.h>

#define MAX 50

struct memory_block {
    int block_size;
    int allocated;
};

void bestFit(struct memory_block memory[], int n, int process_size[], int m) {
    int i, j;
    for (i = 0; i < m; i++) {
        int bestIdx = -1;
        for (j = 0; j < n; j++) {
            if (memory[j].allocated == 0 && memory[j].block_size >= process_size[i]) {
                if (bestIdx == -1)
                    bestIdx = j;
                else if (memory[j].block_size < memory[bestIdx].block_size)
                    bestIdx = j;
            }
        }
        if (bestIdx != -1) {
            memory[bestIdx].allocated = 1;
            printf("Process %d of size %d is allocated to block of size %d\n", i + 1, process_size[i], memory[bestIdx].block_size);
        } else {
            printf("Process %d of size %d cannot be allocated\n", i + 1, process_size[i]);
        }
    }
}

int main() {
    struct memory_block memory[MAX];
    int process_size[MAX];
    int n, m, i;

    printf("Enter the number of memory blocks: ");
    scanf("%d", &n);
    printf("Enter the size of each memory block: \n");
    for (i = 0; i < n; i++) {
        scanf("%d", &memory[i].block_size);
        memory[i].allocated = 0;
    }

    printf("Enter the number of processes: ");
    scanf("%d", &m);
    printf("Enter the size of each process: \n");
    for (i = 0; i < m; i++) {
        scanf("%d", &process_size[i]);
    }

    printf("\nMemory allocation: \n");
    bestFit(memory, n, process_size, m);

    return 0;
}
