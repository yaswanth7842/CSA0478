#include <stdio.h>

// Structure for a process
typedef struct {
    int process_id;
    int arrival_time;
    int burst_time;
    int priority;
    int remaining_time;
} Process;

// Function to swap two processes
void swap(Process *a, Process *b) {
    Process temp = *a;
    *a = *b;
    *b = temp;
}

// Function to sort the processes based on priority
void sort(Process *processes, int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].priority > processes[j + 1].priority) {
                swap(&processes[j], &processes[j + 1]);
            }
        }
    }
}

// Function to implement preemptive priority scheduling
void priorityScheduling(Process *processes, int n) {
    int currentTime = 0;
    int completed = 0;
    while (completed < n) {
        sort(processes, n);
        int selected = -1;
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= currentTime && processes[i].burst_time > 0) {
                selected = i;
                break;
            }
        }
        if (selected == -1) {
            currentTime++;
            continue;
        }
        printf("Process %d at time %d\n", processes[selected].process_id, currentTime);
        processes[selected].burst_time--;
        currentTime++;
        if (processes[selected].burst_time == 0) {
            completed++;
        }
    }
}

// Driver code
int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process processes[n];
    for (int i = 0; i < n; i++) {
        printf("Enter arrival time, burst time, and priority for process %d: ", i + 1);
        scanf("%d %d %d", &processes[i].arrival_time, &processes[i].burst_time, &processes[i].priority);
        processes[i].process_id = i + 1;
        processes[i].remaining_time = processes[i].burst_time;
    }

    priorityScheduling(processes, n);

    return 0;
}
