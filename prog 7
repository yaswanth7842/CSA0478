#include <stdio.h>

// Structure to represent a process
struct Process {
    int pid; // Process ID
    int arrival_time; // Arrival time
    int burst_time; // Burst time
    int waiting_time; // Waiting time
    int turnaround_time; // Turnaround time
};

// Function to find the waiting time and turnaround time for each process
void findWaitingTime(struct Process processes[], int n) {
    int service_time[n];
    service_time[0] = 0;
    processes[0].waiting_time = 0;

    for (int i = 1; i < n; i++) {
        service_time[i] = service_time[i - 1] + processes[i - 1].burst_time;
        processes[i].waiting_time = service_time[i] - processes[i].arrival_time;

        if (processes[i].waiting_time < 0) {
            processes[i].waiting_time = 0;
        }
    }
}

// Function to find the turnaround time for each process
void findTurnaroundTime(struct Process processes[], int n) {
    for (int i = 0; i < n; i++) {
        processes[i].turnaround_time = processes[i].waiting_time + processes[i].burst_time;
    }
}

// Function to calculate the average waiting time and average turnaround time
void findAverageTime(struct Process processes[], int n) {
    findWaitingTime(processes, n);
    findTurnaroundTime(processes, n);

    int total_waiting_time = 0, total_turnaround_time = 0;

    for (int i = 0; i < n; i++) {
        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }

    float average_waiting_time = (float)total_waiting_time / n;
    float average_turnaround_time = (float)total_turnaround_time / n;

    printf("Average Waiting Time: %.2f\n", average_waiting_time);
    printf("Average Turnaround Time: %.2f\n", average_turnaround_time);
}

// Function to implement the Non-Preemptive SJF algorithm
void SJF(struct Process processes[], int n) {
    // Sort the processes by arrival time
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (processes[i].arrival_time > processes[j].arrival_time) {
                struct Process temp = processes[i];
                processes[i] = processes[j];
                processes[j] = temp;
            }
        }
    }

    // Find the waiting time and turnaround time
    findAverageTime(processes, n);
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("Enter arrival time for process P%d: ", i + 1);
        scanf("%d", &processes[i].arrival_time);
        printf("Enter burst time for process P%d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
    }

    SJF(processes, n);

    return 0;
}
